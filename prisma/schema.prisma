// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./data/bot.db"
}

model User {
  id           Int       @id @default(autoincrement())
  telegramId   String    @unique @map("telegram_id")
  userName     String    @map("user_name")
  firstName    String?   @map("first_name")
  lastName     String?   @map("last_name")
  username     String?   // Telegram username
  
  // JSON fields stored as strings
  expertise   String?   // JSON array: ["DEV", "DESIGN", "CONTENT", "GROWTH", "COMMUNITY"]
  skills      String?   // JSON array: ["FRONTEND", "BACKEND", etc.]
  listings    String?   // JSON array: ["Bounties", "Projects"]
  priceRange  String?   @map("price_range") // JSON object: {"minAmount": 100, "maxAmount": 1000, "rangeLabel": "Pennies Collector"}
  
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  listingMatches  UserListingMatch[]
  notifications   UserNotification[]
  reminders       UserReminder[]

  @@map("users")
}

model Listing {
  id                String   @id // Using the original listing ID from API
  title             String
  slug              String   @unique
  deadline          DateTime
  token             String
  usdValue          Int      @map("usd_value")
  type              String   // 'bounty' or 'project'
  compensationType  String   @map("compensation_type") // 'fixed' or 'range'
  
  // Sponsor information (stored as JSON for simplicity)
  sponsor           String   // JSON object with sponsor details
  
  // Skills (stored as JSON array)
  skills            String   // JSON array of skills with subskills
  mappedSkill       String?  @map("mapped_skill") // JSON array of mapped skills using SUPERTEAM_EARN_SKILL_MAPPING
  
  // Metadata
  isActive          Boolean  @default(true) @map("is_active")
  lastFetched       DateTime @default(now()) @map("last_fetched")
  
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  userMatches       UserListingMatch[]
  notifications     UserNotification[]
  reminders         UserReminder[]

  @@map("listings")
}

model UserListingMatch {
  id          Int      @id @default(autoincrement())
  userId      Int      @map("user_id")
  listingId   String   @map("listing_id")
  matchScore  Int      @default(1) @map("match_score") // How many skills matched
  isActive    Boolean  @default(true) @map("is_active")
  
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing     Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@unique([userId, listingId])
  @@map("user_listing_matches")
}

model UserNotification {
  id          Int      @id @default(autoincrement())
  userId      Int      @map("user_id")
  listingId   String   @map("listing_id")
  messageType String   @default("skill_match") @map("message_type") // 'skill_match', 'reminder', etc.
  sentAt      DateTime @default(now()) @map("sent_at")
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing     Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@map("user_notifications")
}

model UserReminder {
  id              Int      @id @default(autoincrement())
  userId          Int      @map("user_id")
  listingId       String   @map("listing_id")
  intervalHours   Int      @default(6) @map("interval_hours") // Reminder interval in hours
  lastRemindedAt  DateTime? @map("last_reminded_at") // When was the last reminder sent
  isActive        Boolean  @default(true) @map("is_active")
  
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing         Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@unique([userId, listingId])
  @@map("user_reminders")
} 